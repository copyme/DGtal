/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file DecoratorCurveTransformation.ih
 * @author Kacper Pluta (\c kacper.pluta@esiee.fr )
 * Laboratoire d'Informatique Gaspard-Monge - LIGM, A3SI, France
 *
 * @date 2014/10/10
 *
 * Implementation of inline methods defined in DecoratorCurveTransformation.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
template <typename TCurve, typename TTransfromation, typename TInverseTransformation>
inline
DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::DecoratorCurveTransformation
( const TCurve  & c, const TTransfromation & t, const TInverseTransformation & i ) : curve(c), trans(t), inverse(i) {}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //
template <typename TCurve, typename TTransfromation, typename TInverseTransformation>
inline
typename DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::RealPoint
DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::x ( const double t ) const
{
    return trans ( curve.x ( t ) );
}

template <typename TCurve, typename TTransfromation, typename TInverseTransformation>
inline
typename DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::RealPoint
DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::xp ( const double t ) const
{
  return trans ( curve.xp ( t ) );
}

template <typename TCurve, typename TTransfromation, typename TInverseTransformation>
inline
double DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::f
( const typename DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::RealPoint & point  ) const
{
    return  curve.f ( inverse ( point ) );
}

template <typename TCurve, typename TTransfromation, typename TInverseTransformation>
inline
double DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::g
( const typename DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::RealPoint & point  ) const
{
    return  curve.g ( inverse ( point ) );
}

template <typename TCurve, typename TTransfromation, typename TInverseTransformation>
inline
double DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::h
( const typename DGtal::DecoratorCurveTransformation<TCurve, TTransfromation, TInverseTransformation>::RealPoint & point  ) const
{
    return  curve.h ( inverse ( point ) );
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'DecoratorCurveTransformation'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'DecoratorCurveTransformation' to write.
 * @return the output stream after the writing.
 */
template <typename TCurve, typename TTransfromation, typename TInverseTransformation>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
                  const DecoratorCurveTransformation < TCurve, TTransfromation, TInverseTransformation > & object )
{
    object.selfDisplay ( out );
    return out;
}

template <typename T>
inline
unsigned char DGtal::ParametricCurveDigitizer3DDecorator<T>::findMainAxis ( const char & blockAxis, const double & i )
{
  typename ParametricCurveDigitizer3D<T>::RealVector value;
  value[0] = std::fabs ( ParametricCurveDigitizer3D<T>::curve->curve.xp ( i )[0] );
  value[1] = std::fabs ( ParametricCurveDigitizer3D<T>::curve->curve.xp ( i )[1] );
  value[2] = std::fabs ( ParametricCurveDigitizer3D<T>::curve->curve.xp ( i )[2] );
  
  if ( blockAxis != -1 )
    value[blockAxis] = FLT_MIN;
  
  if ( value[0] > value[1] && value[0] > value[2] )
    return 0;
  else if ( value[1] > value[0] && value[1] > value[2] )
    return 1;
  else
    return 2;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


