/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file DigitalSetToCellularGridConverter.ih
 * @author Kacper Pluta (\c kacper.pluta@esiee.fr )
 * Laboratoire d'Informatique Gaspard-Monge - LIGM, France
 *
 * @date 2015/11/03
 *
 * Implementation of inline methods defined in DigitalSetToCellularGridConverter.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
#include <cassert>
//////////////////////////////////////////////////////////////////////////////

template < typename TKSpace, typename TDigitalSet >
inline
DGtal::DigitalSetToCellularGridConverter< TKSpace, TDigitalSet >::
DigitalSetToCellularGridConverter ( const TKSpace & kspace ) : K ( kspace ) {}

template < typename TKSpace, typename TDigitalSet >
inline
void
DGtal::DigitalSetToCellularGridConverter< TKSpace, TDigitalSet >::init ( 
const ConstIterator & itb, const ConstIterator & ite )
{
  myBegin = itb;
  myEnd = ite;
}

template < typename TKSpace, typename TDigitalSet >
inline
bool
DGtal::DigitalSetToCellularGridConverter< TKSpace, TDigitalSet >::isValid () const
{
  return ( myBegin != myEnd );
}

template < typename TKSpace, typename TDigitalSet >
inline
void
DGtal::DigitalSetToCellularGridConverter< TKSpace, TDigitalSet >::
extractAllCells ( DGtal::DigitalSetToCellularGridConverter< TKSpace, TDigitalSet >::Cells & cells,
		 typename TKSpace::Integer dim )
{
  assert( dim != TKSpace::dimension );
  DGtal::DigitalSetToCellularGridConverter< TKSpace, TDigitalSet >::ConstIterator it = myBegin;
  for (; it != myEnd; ++it )
  {
    typedef typename TKSpace::Cells CellsCollection;
    Cell cell2d = K.uSpel ( *it );
    CellsCollection n = K.uFaces ( cell2d );
    for ( typename CellsCollection::ConstIterator itt = n.begin() ; itt < n.end(); ++itt )
    {
      if ( K.uDim ( *itt ) == dim )
	cells.insert ( *itt );
    }
  }
}

template < typename TKSpace, typename TDigitalSet >
inline
DGtal::DigitalSetToCellularGridConverter< TKSpace, TDigitalSet >::
~DigitalSetToCellularGridConverter() {}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


