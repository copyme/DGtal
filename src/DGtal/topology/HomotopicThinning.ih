/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file HomotopicThinning.ih
 * @author Kacper Pluta (\c kacper.pluta@esiee.fr )
 * Laboratoire d'Informatique Gaspard-Monge - LIGM, France
 *
 * @date 2014/11/13
 *
 * Implementation of inline methods defined in HomotopicThinning.h
 *
 * This file is part of the DGtal library.
 */

///////////////////////////////////////////////////////////////////////////////
// IMPLEMENTATION of inline methods.
///////////////////////////////////////////////////////////////////////////////
#include <queue>

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //
template <class ObjectA_B, class FixedSet, class PriorityFunctor>
inline
DGtal::HomotopicThinning< ObjectA_B, FixedSet, PriorityFunctor>::HomotopicThinning ( PriorityFunctor & prifunctor ) : functor ( prifunctor )
{}

template <class ObjectA_B, class FixedSet, class PriorityFunctor>
inline
void DGtal::HomotopicThinning< ObjectA_B, FixedSet, PriorityFunctor>::operator()( ObjectA_B & shape, const FixedSet & fixedSet, const unsigned int & iter )
{
  
  unsigned int nb_simple=0; 
  unsigned int layer = 1;
  std::queue< typename DigitalSet::Iterator> Q;
  do 
  {
    DigitalSet & S = shape.pointSet();
    
    for ( typename DigitalSet::Iterator it = S.begin(); it != S.end(); ++it )
    {
      if ( functor ( *it ) <= layer)
      {
	if ( shape.isSimple( *it ) )
	  Q.push( it );
      }
    }
    nb_simple = 0;
    while ( ! Q.empty() )
    {
      typename DigitalSet::Iterator it = Q.front();
      Q.pop();
      if ( shape.isSimple( *it ) && std::find ( fixedSet.begin(), fixedSet.end(), *it ) == fixedSet.end() )
      {
	S.erase( *it );
	++nb_simple;
      }
    }
    ++layer;
  }
  while ( nb_simple != 0 && layer <= iter );
}

template <class ObjectA_B, class FixedSet, class PriorityFunctor>
inline
void DGtal::HomotopicThinning< ObjectA_B, FixedSet, PriorityFunctor>::operator()( ObjectA_B & shape, const unsigned int & iter )
{
  
  unsigned int nb_simple=0; 
  unsigned int layer = 1;
  std::queue< typename DigitalSet::Iterator> Q;
  do 
  {
    DigitalSet & S = shape.pointSet();
    
    for ( typename DigitalSet::Iterator it = S.begin(); it != S.end(); ++it )
    {
      if ( functor ( *it ) <= layer)
      {
	if ( shape.isSimple( *it ) )
	  Q.push( it );
      }
    }
    nb_simple = 0;
    while ( ! Q.empty() )
    {
      typename DigitalSet::Iterator it = Q.front();
      Q.pop();
      if ( shape.isSimple( *it ) )
      {
	S.erase( *it );
	++nb_simple;
      }
    }
    ++layer;
  }
  while ( nb_simple != 0 && layer <= iter );
}

///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //

/**
 * Overloads 'operator<<' for displaying objects of class 'HomotopicThinning'.
 * @param out the output stream where the object is written.
 * @param object the object of class 'HomotopicThinning' to write.
 * @return the output stream after the writing.
 */
template <class ObjectA_B, class FixedSet, class PriorityFunctor>
inline
std::ostream&
DGtal::operator<< ( std::ostream & out,
		    const HomotopicThinning<ObjectA_B, FixedSet, PriorityFunctor> & object )
{
    object.selfDisplay ( out );
    return out;
}

//                                                                           //
///////////////////////////////////////////////////////////////////////////////


